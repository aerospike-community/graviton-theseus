---
# source: https://gist.github.com/ColOfAbRiX/48f6e70014b8db972caa1d958d482613
# Detects the cloud provider on which the VM is running and sets accordingly the
# following variables:
#   cloud_platform_is_aws=true when on AWS, false otherwise
#   cloud_platform_is_gcp=true when on GCP, false otherwise
#   cloud_platform_is_azure=true when on Azure, false otherwise
#   cloud_platform_name:
#    - 'azure' when on Azure
#    - 'aws' when on AWS
#    - 'gcp' when on GCP
#    - 'unknown' otherwise

- name: Install dmidecode package
  ansible.builtin.package:
    name:
      - dmidecode
    state: present

- set_fact:
    cloud_platform_is_aws:   false
    cloud_platform_is_gcp:   false
    cloud_platform_is_azure: false

# SEE: https://stackoverflow.com/questions/11570965/how-to-detect-azure-amazon-vm
- name: "Detect AWS"
  block:

    - name: "Probe for AWS"
      shell: dmidecode -s bios-vendor | grep -iq amazon
      changed_when: false
      failed_when: false
      register: probe_aws

    - set_fact:
        cloud_platform_is_aws: "{{ probe_aws.rc == 0 }}"

# SEE: https://stackoverflow.com/questions/30911775/how-to-know-if-a-machine-is-an-google-compute-engine-instance
- name: "Detect GCP"
  block:

    - name: "Probe for GCP"
      shell: dmidecode -s bios-version | grep -iq "google"
      changed_when: false
      failed_when: false
      register: probe_gcp

    - set_fact:
        cloud_platform_is_gcp: "{{ probe_gcp.rc == 0 }}"

- name: "Set Cloud Platform"
  set_fact:
    cloud_platform_name: "{% if cloud_platform_is_azure %}azure{% elif cloud_platform_is_aws %}aws{% elif cloud_platform_is_gcp %}gcp{% else %}unknown{% endif %}"

- name: "Set Device for AWS"
  set_fact:
    drive_location: /dev/nvme1n1
  when: cloud_platform_is_aws

- name: "Set Device for GCP"
  set_fact:
    drive_location: /dev/nvme0n2
  when: cloud_platform_is_gcp
